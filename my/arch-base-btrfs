#!/bin/bash

# Приём входных данных и запись их в переменные для дальнейшей установки:
# swapfile   - Размер файла подкачки
# kernel     - Версия ядра
let swapfile="${1//G}*1024"
kernel=$2

# Сквозные данные для передачи в следующий скрипт:
# username - Имя пользователя
# hostname - Имя компьтера в сети
username=$3
hostname=$4

#-----------------------------------------------------------------

## Определение переменных, оборудования, оси и др. ##

# Определение операционной системы из которой идёт установка:
if [[ $(cat /etc/*-release | grep -w NAME | cut -d= -f2 | tr -d '"') == 'Manjaro Linux' ]]; then
    os=Manjaro
else
    os=Archlinux
fi

# Определяем по видеокарте виртуальная машина или реальный компьютер:
if [[ $(LC_ALL=C lspci | grep -i '.* VGA .*') == *' VMware '* ]]; then
    computer=Virtual
else
    computer=Real
fi

defaulthook='HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)'
btrfshook='HOOKS=(base systemd autodetect modconf block btrfs filesystems keyboard keymap)'

#-----------------------------------------------------------------

# Если этот скрипт уже запускался, то остаются примонтированные диски и файл подкачки.
# Поэтому, отключаем файл подкачки ...
if [ -d /mnt/@swap/swapfile ]; then
    # созданный для btrfs ...
    swapoff /mnt/@swap/swapfile
elif [ -d /mnt/mnt/swapfile ]; then
    # или созданный для ext4 ...
    swapoff /mnt/mnt/swapfile
fi
# и отмонтируем все примонтированные диски.
umount -R /mnt

#-----------------------------------------------------------------

## Разбивка диска ##

# Для BIOS создаём один раздел Root на весь диск:
parted -s /dev/sda mktable msdos \
    mkpart primary btrfs 1M 100% \
set 1 boot on
# Форматируем раздел Root в Btrfs:
mkfs.btrfs -f /dev/sda1
# Примонтируем раздел Root в /mnt:
mount /dev/sda1 /mnt
# Создаем три подтома @root, @home и @snapshot:
btrfs subvolume create /mnt/@root
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@snap
# Отмонтируем раздел Root:
umount /dev/sda1
# И примонтируем уже подтом @root в /mnt с доп. параметрам:
mount /dev/sda1 /mnt -o subvol=@root,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
# Создаем каталоги /mnt/home и /mnt/.snap,
mkdir -p /mnt/{home,.snap}
# Примонтируем подтом @home в /mnt/home с доп. параметрами:
mount /dev/sda1 /mnt/home -o subvol=@home,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
# Примонтируем подтом @snap в /mnt/.snap с доп. параметрами:
mount /dev/sda1 /mnt/.snap -o subvol=@snap,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async

#-----------------------------------------------------------------

## Установка базовой системы ##

# base, base-devel - Базовая система и пакеты для компиляции,
# $kernel $kernel\-headers - Ядро,
# nano - Простой консольный текстовый редактор,
# grub - загрузчик оси,
# intel-ucode - Микрокод для интела.
if [ $os = Manjaro ]; then # Установка из Manjaro
    basestrap /mnt base base-devel $kernel $kernel\-headers nano grub intel-ucode
    # На реальный компьютер ставим пакет драйверов linux-firmware, на виртуальном он не нужен.
    if [ $computer = Real ]; then
        basestrap /mnt linux-firmware
    fi
    # Генерируем fstab по UUID:
    fstabgen -U /mnt > /mnt/etc/fstab
else # Установка из Arch-подобных дистрибутивов (Archlinux, EndeavourOS и др.)
    pacstrap /mnt base base-devel $kernel $kernel\-headers nano grub intel-ucode
    # На реальный компьютер ставим пакет драйверов linux-firmware, на виртуальном он не нужен.
    if [ $computer = Real ]; then
        pacstrap /mnt linux-firmware
    fi
    # Генерируем fstab по UUID:
    genfstab -U /mnt > /mnt/etc/fstab
fi

#-----------------------------------------------------------------

## Утилиты для btrfs ##

# btrfs-progs - Утилиты для btrfs,
# grub-btrfs - Загрузка со снимков(снапшотов) btrfs,
if [ $os = Manjaro ]; then
    # Для Manjaro:
    basestrap /mnt btrfs-progs grub-btrfs
else
    # Для Archlinux:
    pacstrap /mnt btrfs-progs grub-btrfs
fi

#-----------------------------------------------------------------

## Swapfile ##

# Создаем подтом @swap
btrfs subvolume create /mnt/@swap
# Переходим в @swap
cd /mnt/@swap
# Создаём пустой файл подкачки
truncate -s 0 ./swapfile
# Отключаем копирование при записи для файла подкачки
chattr +C ./swapfile
# Отключаем сжатие файла подкачки
btrfs property set ./swapfile compression none
# Создаём файл нужного размера
dd if=/dev/zero of=./swapfile bs=1M count=$swapfile status=progress
# Разрешаем доступ к файлу подкачки только root-у
chmod 600 ./swapfile
# Инициализируем файл подкачки и включаем его
mkswap ./swapfile
swapon ./swapfile
# Прописываем в fstab, автомонтирование файла подкачки при загрузке системы
echo -e '# Swapfile\n/@swap/swapfile none swap sw 0 0' | tee -a /mnt/etc/fstab

#-----------------------------------------------------------------

# Настроим параметры запуска системы:
sed -i "s/^$defaulthook/$btrfshook/" /mnt/etc/mkinitcpio.conf

#-----------------------------------------------------------------

## Чрутимся и продолжаем установку:

# Скачиваем скрипт для дальнейшей установки:
scripturl='https://raw.githubusercontent.com/S0u1b0y/install/in/my/arch-system-bios'
curl -so /mnt/arch-system-bios $scripturl
if [ $os = Manjaro ]; then
    # Если ставим из Manjaro
    manjaro-chroot /mnt sh /arch-system-bios $username $hostname
else
    # Если ставим из Arch
    arch-chroot /mnt sh /arch-system-bios $username $hostname
fi
# Удаляем скрипт, чтобы он не остался в установленной системе
rm /mnt/arch-system-bios

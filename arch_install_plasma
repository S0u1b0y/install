#### Установка Arch Plasma ####

# Перейдем в учётную запись рута:
sudo su

#-----------------------------------------------------------------

# Разметка, форматирование диска и установка базовой системы
# Внимание!!! Запускаем только один из четырёх скриптов,

# UEFI - Btrfs:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_base_uefi_btrfs.sh)"
# UEFI - Ext4:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_base_uefi_ext4.sh)"

# BIOS (Legacy) - Btrfs:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_base_bios_btrfs.sh)"
# BIOS (Legacy) - Ext4:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_base_bios_ext4.sh)"

#-----------------------------------------------------------------

# Если вдруг, по какой-то причине, fstab не сгенерировался по UUID,
# то командой blkid смотрим UUID диска /dev/sda и прописываем его в fstab вместо /dev/sda1 - nano /mnt/etc/fstab.

# Чрутимся:
manjaro-chroot /mnt

#-----------------------------------------------------------------

# Установка и настройка основной системы
# Внимание!!! Запускаем только один из четырёх скриптов,

# Реальный компьютер - UEFI:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_system_uefi.sh)"
# Реальный компьютер - BIOS (Legacy):
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_system_bios.sh)"

# Виртуальный компьютер - UEFI:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_system_uefi_vbox.sh)"
# Виртуальный компьютер - BIOS (Legacy):
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_system_bios_vbox.sh)"

#-----------------------------------------------------------------

# Установка KDE Plasma:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_de_plasma.sh)"

# Завершаем установку, выходим (Ctrl+D) и перезагружаемся:
reboot

#-----------------------------------------------------------------

#### После перезагрузки ####

# Создаем каталоги пользователя в домашней папке на английском языке:
sudo pacman --noconfirm -S xdg-user-dirs && LC_ALL=C xdg-user-dirs-update --force
# То же самое, но на русском языке:
sudo pacman --noconfirm -S xdg-user-dirs && xdg-user-dirs-update --force

# Установим менеджер пакетов yay:
cd /tmp && git clone https://aur.archlinux.org/yay-bin.git && cd yay-bin && makepkg --noconfirm -si

#-----------------------------------------------------------------

## Драйвера ##

## Микрокод:
# Intel:
sudo pacman --noconfirm -S intel-ucode
# AMD:
sudo pacman --noconfirm -S amd-ucode

## Видео:
# AMD:
pacman --noconfirm -S xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon
# Intel:
pacman --noconfirm -S xf86-video-intel vulkan-intel lib32-vulkan-intel
# nVidia:
pacman --noconfirm -S nvidia nvidia-utils lib32-nvidia-utils nvidia-settings
# VirtualBox:
pacman --noconfirm -S xf86-video-vesa virtualbox-guest-utils

# Мониторинг и разгон для nVidia карт Green With Envy (опционально):
yay --noconfirm -S gwe

## Для ноутбука:
# Драйвер тачпада:
pacman --noconfirm -S xf86-input-synaptics
# Управление гибридной графикой Optimus Manager:
yay -S optimus-manager optimus-manager-qt
sudo systemctl enable --now optimus-manager

#-----------------------------------------------------------------

## Настройки ##

# Установку и настройку Zsh см. в файле https://raw.githubusercontent.com/S0u1b0y/install/Instructions/arch_zsh

# Установим более низкий уровень использования файла подкачки (строка 1),
# Уменьшим время ожидания "зависших" приложений с 90 до 10 секунд (строка 2),
# Зададим максимальный размер systemd-журнала (строка 3).
echo 'vm.swappiness=10' | sudo tee /etc/sysctl.d/99-swappiness.conf
sudo sed -i 's/#DefaultTimeoutStopSec=90s/DefaultTimeoutStopSec=10s/' /etc/systemd/system.conf
sudo sed -i 's/#SystemMaxUse=/SystemMaxUse=50M/' /etc/systemd/journald.conf

#-----------------------------------------------------------------

## Оформление ##

# Шрифты, иконки и курсоры:
yay --noconfirm -S qogir-icon-theme

#-----------------------------------------------------------------

## Программы ##

# Pamac:
yay --noconfirm -S pamac-aur pamac-tray-icon-plasma

# Ananicy - Управляет приоритетами приложений:
yay --noconfirm -S ananicy && sudo systemctl enable --now ananicy

# Nohang - Следит за потреблением озу, выгружая неиспользуемые процессы:
yay --noconfirm -S nohang && sudo systemctl enable --now nohang

# Bluetooth (опционально):
sudo pacman --noconfirm -S bluedevil
sudo systemctl enable --now bluetooth

# Управление сетевыми соединениями (опционально):
sudo pacman --noconfirm -S networkmanager plasma-nm
sudo systemctl enable --now NetworkManager
# Плагины NetworkManager для разных типов соединений (опционально):
sudo pacman --noconfirm -S networkmanager-openconnect networkmanager-openvpn networkmanager-pptp networkmanager-vpnc

# Брандмауэр (Firewall) и модуль управления для Plasma (опционально):
sudo pacman --noconfirm -S ufw plasma-firewall
sudo systemctl enable --now ufw.service

# Если нужна поддержка принтера, то ставим:
sudo pacman --noconfirm -S cups cups-pdf print-manager
sudo systemctl enable --now cups.service

# Браузер Firefox:
sudo pacman --noconfirm -S firefox firefox-i18n-ru

# Браузер Chrome:
yay --noconfirm -S google-chrome

# Torrent:
sudo pacman --noconfirm -S qbittorrent

# Java:
sudo pacman --noconfirm -S jdk-openjdk

# Code OSS (free Visual Studio Code):
yay -S code
# Мои настройки (опционально):
editor.wordWrap - On
editor.fontSize - 12
editor.dragAndDrop - false

# Работа с видео:
yay -S mediainfo mkvtoolnix-gui

# Yandex Disk:
yay -S yandex-disk && yandex-disk setup

#-----------------------------------------------------------------

## Игры ##

# Steam:
sudo pacman --noconfirm -S steam

# PortProton (https://portwine-linux.ru/port-proton-linux):
sudo pacman -S gamemode lib32-gamemode icoutils zenity bubblewrap zstd cabextract tar
wget -c "https://github.com/Castro-Fidel/PortWINE/raw/master/portwine_install_script/PortProton-97"
sh PortProton-97

# Настройка Proton в Steam-клиенте на Linux: В меню (вверху слева) нажимаем: Steam->Настройки, выбираем раздел Steam Play (в самом низу) и там ставим галочку "Включить Steam Play для других продуктов", жмем ОК. Все Proton включён, можно пытаться запускать Windows-игры.

# Minecraft:
yay -S multimc jre8-openjdk
sudo archlinux-java set java-17-openjdk
java -version

#-----------------------------------------------------------------

## Подкачка (опционально) ##

## Файл подкачки на Btrfs:
# Создаем подтом @swap (строка 1)
# Переходим в @swap (строка 2)
# Создаём пустой файл подкачки (строка 3)
# Отключаем копирование при записи для файла подкачки (строка 4)
# Отключаем сжатие файла подкачки (строка 5)
# Создаём файл нужного размера (строка 6)
# Разрешаем доступ к файлу подкачки только root-у (строка 7)
# Инициализируем файл подкачки и включаем его (строки 8-9)
# Прописываем в fstab, автомонтирование файла подкачки при загрузке системы (строка 10)
sudo btrfs subvolume create /@swap
cd /@swap
sudo truncate -s 0 ./swapfile
sudo chattr +C ./swapfile
sudo btrfs property set ./swapfile compression none
sudo dd if=/dev/zero of=./swapfile bs=1M count=8192 status=progress
sudo chmod 600 ./swapfile
sudo mkswap ./swapfile
sudo swapon ./swapfile
echo -e '# Swapfile\n/@swap/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
sudo mount -a

## Файл подкачки на Ext4:
# Переходим в mnt установленной системы (строка 1)
# Создаём файл нужного размера (строка 2)
# Разрешаем доступ к файлу подкачки только root-у (строка 3)
# Инициализируем файл подкачки и включаем его (строки 4-5)
# Прописываем в fstab, автомонтирование файла подкачки при загрузке системы (строка 6)
cd /mnt
dd if=/dev/zero of=./swapfile bs=1M count=8192 status=progress
chmod 600 ./swapfile
mkswap ./swapfile
swapon ./swapfile
echo -e '# Swapfile\n/mnt/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
sudo mount -a

## Zswap:
# Устанавливаем (строка 1)
# Раскоментируем параметры в файле конфигурации (строка 2)
# Включим использование (строка 3)
# Отведем для zswap, вместо четверти, половину оперативной памяти (строка 4)
# Включаем загрузку при старте системы (строка 5)
sudo pacman --noconfirm -S systemd-swap
sudo sed -i 's/#zram_/zram_/g' /etc/systemd/swap.conf
sudo sed -i 's/zram_enabled=0/zram_enabled=1/' /etc/systemd/swap.conf
sudo sed -i 's/RAM_SIZE \/ 4/RAM_SIZE \/ 2/' /etc/systemd/swap.conf
sudo systemctl enable --now systemd-swap.service

#-----------------------------------------------------------------

## Виртуализация (опционально) ##

# VirtualBox стандартное ядро:
sudo pacman --noconfirm -S virtualbox virtualbox-ext-vnc virtualbox-host-modules-arch
# VirtualBox LTS-ядро:
sudo pacman --noconfirm -S virtualbox virtualbox-ext-vnc virtualbox-host-dkms

# KVM (Qemu):
sudo pacman -S virt-manager bridge-utils dnsmasq dmidecode ebtables iptables openbsd-netcat qemu qemu-arch-extra qemu-guest-agent ovmf vde2
sudo systemctl enable --now libvirtd dnsmasq
sudo gpasswd -a $(whoami) kvm libvirt && newgrp libvirt
sudo sed -i 's/#unix_sock_group = "libvirt"/unix_sock_group = "libvirt"/' /etc/libvirt/libvirtd.conf
sudo sed -i 's/#unix_sock_rw_perms = "0770"/unix_sock_rw_perms = "0770"/' /etc/libvirt/libvirtd.conf
sudo systemctl restart libvirtd.service

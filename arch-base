#!/bin/bash

# Приём входных данных для дальнейшей установки:
# filesystem - Файловая система
# disk       - Установочный диск
# swapfile   - Размер файла подкачки
# kernel     - Версия ядра
# bootpart   - Размер boot-раздела
# rootpart   - Размер root-раздела
filesystem=$1
disk=$2
kernel=$3
swapfile=$4
bootpart=$5
rootpart=$6

#-----------------------------------------------------------------

## Определение переменных ##

# Определение операционной системы Manjaro или Arch:
os=$(cat /etc/*-release | grep -w DISTRIB_ID | cut -d= -f2 | tr -d '"')
# Определяем по видеокарте виртуальная или реальная машина:
if [[ $(LC_ALL=C lspci | grep -i '.* VGA .*') == *' VMware '* ]]; then
    comp=virtual
else
    comp=real
fi

#-----------------------------------------------------------------

# Если примонтированы диски, то отмонтируем их
umount -R /mnt

# Определяем UEFI или BIOS на компьютере:
if [ -d /sys/firmware/efi ]; then
    ## Если UEFI:
    if [ $filesystem = btrfs ]; then
        # Создаем два раздела Root и EFI,
        parted -s $disk -- mktable gpt \
            mkpart Root btrfs 1M \-$bootpart \
            mkpart EFI fat32 \-$bootpart 100% \
        set 2 esp on
        # Форматируем раздел sda1 в Btrfs, а раздел sda2 в fat32:
        mkfs.btrfs -f $disk\1
        mkfs.fat -F32 $disk\2
        # Примонтируем раздел sda1 в /mnt:
        mount $disk\1 /mnt
        # Создаем три подтома @root, @home и @snapshot:
        btrfs subvolume create /mnt/@root
        btrfs subvolume create /mnt/@home
        btrfs subvolume create /mnt/@snap
        # Отмонтируем раздел sda1:
        umount $disk\1
        # И примонтируем уже подтом @root в /mnt с доп. параметрам:
        mount $disk\1 /mnt -o subvol=@root,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
        # Создаем каталоги /mnt/home, /mnt/.snaphot и /mnt/boot/efi,
        mkdir -p /mnt/{home,.snap,boot/efi}
        # Примонтируем подтом @home в /mnt/home с доп. параметрами:
        mount $disk\1 /mnt/home -o subvol=@home,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
        # Примонтируем подтом @snaphot в /mnt/.snaphot с доп. параметрами:
        mount $disk\1 /mnt/.snap -o subvol=@snap,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
        # Примонтируем раздел sda2 в /mnt/boot/efi:
        mount $disk\2 /mnt/boot/efi
    elif [ $filesystem = ext4 ]; then
        # Создаем три раздела Root, Home и EFI:
        parted -s $disk -- mktable gpt \
            mkpart Root ext4 1M $rootpart \
            mkpart Home ext4 $rootpart \-$bootpart \
            mkpart EFI fat32 \-$bootpart 100% \
        set 3 esp on
        # Форматируем разделы sda1 и sda2 в ext4, а раздел sda3 в fat32:
        mkfs.ext4 -L Root $disk\1
        mkfs.ext4 -L Home $disk\2
        mkfs.fat -F32 $disk\3
        # Примонтируем раздел sda1 в /mnt:
        mount $disk\1 /mnt
        # Создаем каталоги /mnt/home и /mnt/boot/efi:
        mkdir -p /mnt/{home,boot/efi}
        # Примонтируем раздел sda2 в /mnt/home:
        mount $disk\2 /mnt/home
        # Примонтируем раздел sda3 в /mnt/boot/efi:
        mount $disk\3 /mnt/boot/efi
    fi
else
    ## Если BIOS:
    if [ $filesystem = btrfs ]; then
        # Создаём один раздел на весь диск:
        parted -s $disk -- mktable msdos \
            mkpart primary btrfs 1M 100% \
        set 1 boot on
        # Форматируем раздел sda1 в Btrfs:
        mkfs.btrfs -f $disk\1
        # Примонтируем раздел sda1 в /mnt:
        mount $disk\1 /mnt
        # Создаем три подтома @root, @home и @snapshot:
        btrfs subvolume create /mnt/@root
        btrfs subvolume create /mnt/@home
        btrfs subvolume create /mnt/@snap
        # Отмонтируем раздел sda1:
        umount $disk\1
        # И примонтируем уже подтом @root в /mnt с доп. параметрам:
        mount $disk\1 /mnt -o subvol=@root,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
        # Создаем каталоги /mnt/home и /mnt/.snaphot:
        mkdir -p /mnt/{home,.snap}
        # Примонтируем подтом @home в /mnt/home с доп. параметрами:
        mount $disk\1 /mnt/home -o subvol=@home,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
        # Примонтируем подтом @snaphot в /mnt/.snaphot с доп. параметрами:
        mount $disk\1 /mnt/.snap -o subvol=@snap,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
    elif [ $filesystem = ext4 ]; then
        # Создаем два раздела Root и Home:
        parted -s $disk mktable msdos \
            mkpart primary ext4 1M $rootpart \
            mkpart primary ext4 $rootpart 100% \
        set 1 boot on
        # Форматируем разделы в ext4 с метками Root и Home соответственно:
        mkfs.ext4 -L Root $disk\1
        mkfs.ext4 -L Home $disk\2
        # Примонтируем раздел sda1 в /mnt:
        mount $disk\1 /mnt
        # Создаем каталог /mnt/home:
        mkdir -p /mnt/home
        # Примонтируем раздел sda2 в /mnt/home,
        mount $disk\2 /mnt/home
    fi
fi

# Ставим базовую систему:
# base, base-devel - Базовая система и пакеты для компиляции,
# $kernel $kernel\-headers - Ядро,
# nano - Простой консольный текстовый редактор,
# wget - Консольный загрузчик.
# Определяем из какого дистрибутива идет установка:
if [ $os = ManjaroLinux ]; then
    # Если ставим из Manjaro:
    basestrap /mnt base base-devel $kernel $kernel\-headers nano wget
    # Генерируем fstab по UUID:
    fstabgen -U /mnt > /mnt/etc/fstab
elif [ $os = Arch ]; then
    # Если ставим из Arch:
    pacstrap /mnt base base-devel $kernel $kernel\-headers nano wget
    # Генерируем fstab по UUID:
    genfstab -U /mnt > /mnt/etc/fstab
fi

# При установке Arch если компьютер реальный, то ставим пакет драйверов linux-firmware
# на виртуальном компьютере он не нужен, а в Manjaro автоматически ставится в пакете base.
if [ $os = Arch ]; then
    if [ $comp = real ]; then
        # Если ставим из Manjaro, то используем скрипт basestrap
        if [ $os = ManjaroLinux ]; then basestrap /mnt linux-firmware fi
        # Если ставим из EndeavourOS (Arch), то используем скрипт pacstrap
        if [ $os = Arch ]; then pacstrap /mnt linux-firmware fi
    fi
fi

## Настроим параметры запуска системы:
if [ $filesystem = btrfs ]; then
    # На btrfs (Меняем udev на systemd, fsck на keymap, добавляем btrfs):
    sed -i 's/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/HOOKS=(base systemd autodetect modconf block btrfs filesystems keyboard keymap)/' /mnt/etc/mkinitcpio.conf
elif [ $filesystem = ext4 ]; then
    # На ext4 (Меняем udev на systemd):
    sed -i 's/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/HOOKS=(base systemd autodetect modconf block filesystems keyboard fsck)/' /mnt/etc/mkinitcpio.conf
fi

## Grub ##
# Определяем UEFI или BIOS на компьютере:
if [ -d /sys/firmware/efi ]; then
    ## Если UEFI:
    # Устанавливаем grub в систему
    if [ $os = ManjaroLinux ]; then basestrap /mnt grub efibootmgr fi
    if [ $os = Arch ]; then pacstrap /mnt grub efibootmgr fi
    # Устанавливаем grub на диск
    grub-install --target=x86_64-efi --root-directory=/mnt --bootloader-id=grub --efi-directory=/boot/efi
else
    ## Если BIOS:
    # Устанавливаем grub в систему
    if [ $os = ManjaroLinux ]; then basestrap /mnt grub fi
    if [ $os = Arch ]; then pacstrap /mnt grub fi
    # Устанавливаем grub на диск
    grub-install --target=i386-pc --root-directory=/mnt $disk
fi

# Для btrfs установим утилиты
if [ $filesystem = btrfs ]; then
    if [ $os = ManjaroLinux ]; then basestrap /mnt btrfs-progs grub-btrfs fi
    if [ $os = Arch ]; then pacstrap /mnt btrfs-progs grub-btrfs fi
fi

## Swapfile ##
# Если параметр swapfile не 0, то создаём файл подкачки:
if [ $swapfile != 0 ]; then
    if [ $filesystem = btrfs ]; then
        # Создаем подтом @swap
        sudo btrfs subvolume create /mnt/@swap
        # Переходим в @swap
        cd /mnt/@swap
        # Создаём пустой файл подкачки
        sudo truncate -s 0 ./swapfile
        # Отключаем копирование при записи для файла подкачки
        sudo chattr +C ./swapfile
        # Отключаем сжатие файла подкачки
        sudo btrfs property set ./swapfile compression none
        # Создаём файл нужного размера
        sudo dd if=/dev/zero of=./swapfile bs=1M count=$swapfile status=progress
        # Разрешаем доступ к файлу подкачки только root-у
        sudo chmod 600 ./swapfile
        # Инициализируем файл подкачки и включаем его
        sudo mkswap ./swapfile
        sudo swapon ./swapfile
        # Прописываем в fstab, автомонтирование файла подкачки при загрузке системы
        echo -e '# Swapfile\n/@swap/swapfile none swap sw 0 0' | sudo tee -a /mnt/etc/fstab
    elif [ $filesystem = ext4 ]; then
        # Переходим в mnt установленной системы
        cd /mnt/mnt
        # Создаём файл нужного размера
        dd if=/dev/zero of=./swapfile bs=1M count=$swapfile status=progress
        # Разрешаем доступ к файлу подкачки только root-у
        chmod 600 ./swapfile
        # Инициализируем файл подкачки и включаем его
        mkswap ./swapfile
        swapon ./swapfile
        # Прописываем в fstab, автомонтирование файла подкачки при загрузке системы 
        echo -e '# Swapfile\n/mnt/swapfile none swap sw 0 0' | sudo tee -a /mnt/etc/fstab
    fi
fi

# Проверяем:
lsblk
swapon -s
cat /mnt/etc/fstab

#!/bin/bash

# Приём входных данных и запись их в переменные для дальнейшей установки:
# filesystem - Файловая система
# disk       - Установочный диск
# swapfile   - Размер файла подкачки
# kernel     - Версия ядра
# bootpart   - Размер boot-раздела
# rootpart   - Размер root-раздела
filesystem=$1
disk=$2
kernel=$3
swapfile=$4
bootpart=$5
rootpart=$6

#-----------------------------------------------------------------

## Определение переменных ##

# Определение операционной системы из которой идёт установка Manjaro или Arch:
os=$(cat /etc/*-release | grep -w DISTRIB_ID | cut -d= -f2 | tr -d '"')

# Унификация команд из разных дистибутивов Manjaro и Arch:
# installpack вместо basestrap(Manjaro) или pacstrap(Arch),
# createfstab вместо fstabgen(Manjaro) или genfstab(Arch).
if [ $os = ManjaroLinux ]; then
    installpack=basestrap
    createfstab=fstabgen
elif [ $os = Arch ]; then
    installpack=pacstrap
    createfstab=genfstab
fi

# Определяем по видеокарте виртуальная машина или реальный компьютер:
if [ $(LC_ALL=C lspci | grep -i '.* VGA .*') = *' VMware '* ]; then
    comp=virtual
else
    comp=real
fi

# Определяем UEFI или BIOS на компьютере:
if [ -d /sys/firmware/efi ]; then
    bootsys=UEFI
else
    bootsys=BIOS
fi

#-----------------------------------------------------------------

# Если примонтированы диски, то отмонтируем их
umount -R /mnt

## Btrfs ##
if [ $filesystem = btrfs ]; then
    if [ $bootsys = UEFI ]; then
        # Для UEFI создаем два раздела Root и EFI,
        parted -s $disk -- mktable gpt \
            mkpart Root btrfs 1M \-$bootpart \
            mkpart EFI fat32 \-$bootpart 100% \
        set 2 esp on
    elif [ $bootsys = BIOS ]; then
        # Для BIOS создаём один раздел Root на весь диск:
        parted -s $disk -- mktable msdos \
            mkpart primary btrfs 1M 100% \
        set 1 boot on
    fi
    # Форматируем раздел Root в Btrfs:
    mkfs.btrfs -f $disk\1
    # Примонтируем раздел Root в /mnt:
    mount $disk\1 /mnt
    # Создаем три подтома @root, @home и @snapshot:
    btrfs subvolume create /mnt/@root
    btrfs subvolume create /mnt/@home
    btrfs subvolume create /mnt/@snap
    # Отмонтируем раздел Root:
    umount $disk\1
    # И примонтируем уже подтом @root в /mnt с доп. параметрам:
    mount $disk\1 /mnt -o subvol=@root,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
    # Создаем каталоги /mnt/home и /mnt/.snap,
    mkdir -p /mnt/{home,.snap}
    # Примонтируем подтом @home в /mnt/home с доп. параметрами:
    mount $disk\1 /mnt/home -o subvol=@home,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
    # Примонтируем подтом @snap в /mnt/.snap с доп. параметрами:
    mount $disk\1 /mnt/.snap -o subvol=@snap,noatime,nodiratime,compress=zstd:2,space_cache=v2,discard=async
    # UEFI Boot
    if [ $bootsys = UEFI ]; then
        # Форматируем раздел EFI в fat32:
        mkfs.fat -F32 $disk\2
        # Создаем каталог /mnt/boot/efi,
        mkdir -p /mnt/boot/efi
        # Примонтируем раздел EFI в /mnt/boot/efi:
        mount $disk\2 /mnt/boot/efi
    fi

## Ext4 ##
elif [ $filesystem = ext4 ]; then
    if [ $bootsys = UEFI ]; then
        # Для UEFI создаем три раздела Root, Home и EFI:
        parted -s $disk -- mktable gpt \
            mkpart Root ext4 1M $rootpart \
            mkpart Home ext4 $rootpart \-$bootpart \
            mkpart EFI fat32 \-$bootpart 100% \
        set 3 esp on
    elif [ $bootsys = BIOS ]; then
        # Для BIOS создаем два раздела Root и Home:
        parted -s $disk mktable msdos \
            mkpart primary ext4 1M $rootpart \
            mkpart primary ext4 $rootpart 100% \
        set 1 boot on
    fi
    # Форматируем разделы Root и Home в ext4:
    mkfs.ext4 -L Root $disk\1
    mkfs.ext4 -L Home $disk\2
    # Примонтируем раздел Root в /mnt:
    mount $disk\1 /mnt
    # Создаем каталог /mnt/home:
    mkdir -p /mnt/home
    # Примонтируем раздел Home в /mnt/home:
    mount $disk\2 /mnt/home
    # UEFI Boot
    if [ $bootsys = UEFI ]; then
        # Форматируем раздел EFI в fat32:
        mkfs.fat -F32 $disk\3
        # Создаем каталог /mnt/boot/efi:
        mkdir -p /mnt/boot/efi
        # Примонтируем раздел EFI в /mnt/boot/efi:
        mount $disk\3 /mnt/boot/efi
    fi
fi

# Ставим базовую систему:
# base, base-devel - Базовая система и пакеты для компиляции,
# $kernel $kernel\-headers - Ядро,
# nano - Простой консольный текстовый редактор,
# wget - Консольный загрузчик.
$installpack /mnt base base-devel $kernel $kernel\-headers nano wget

# Генерируем fstab по UUID:
$createfstab -U /mnt > /mnt/etc/fstab

# При установке Arch если компьютер реальный, то ставим пакет драйверов linux-firmware
# на виртуальном компьютере он не нужен, а в Manjaro ставится автоматически в пакете base.
if [ $os = Arch -a $comp = real ]; then
    $installpack /mnt linux-firmware
fi

## Настроим параметры запуска системы:
if [ $filesystem = btrfs ]; then
    # На btrfs (Меняем udev на systemd, fsck на keymap, добавляем btrfs):
    sed -i 's/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/HOOKS=(base systemd autodetect modconf block btrfs filesystems keyboard keymap)/' /mnt/etc/mkinitcpio.conf
elif [ $filesystem = ext4 ]; then
    # На ext4 (Меняем udev на systemd):
    sed -i 's/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/HOOKS=(base systemd autodetect modconf block filesystems keyboard fsck)/' /mnt/etc/mkinitcpio.conf
fi

## Grub ##
# Определяем UEFI или BIOS на компьютере:
if [ -d /sys/firmware/efi ]; then
    ## Если UEFI:
    # Устанавливаем grub в систему
    $installpack /mnt grub efibootmgr
    # Устанавливаем grub на диск
    grub-install --target=x86_64-efi --root-directory=/mnt --bootloader-id=grub --efi-directory=/boot/efi
else
    ## Если BIOS:
    # Устанавливаем grub в систему
    $installpack /mnt grub
    # Устанавливаем grub на диск
    grub-install --target=i386-pc --root-directory=/mnt $disk
fi

# Для btrfs установим утилиты
if [ $filesystem = btrfs ]; then
    $installpack /mnt btrfs-progs grub-btrfs
fi

## Swapfile ##
# Если параметр swapfile не 0, то создаём файл подкачки:
if [ $swapfile != 0 ]; then
    if [ $filesystem = btrfs ]; then
        # Создаем подтом @swap
        btrfs subvolume create /mnt/@swap
        # Переходим в @swap
        cd /mnt/@swap
        # Создаём пустой файл подкачки
        truncate -s 0 ./swapfile
        # Отключаем копирование при записи для файла подкачки
        chattr +C ./swapfile
        # Отключаем сжатие файла подкачки
        btrfs property set ./swapfile compression none
        # Создаём файл нужного размера
        dd if=/dev/zero of=./swapfile bs=1M count=$swapfile status=progress
        # Разрешаем доступ к файлу подкачки только root-у
        chmod 600 ./swapfile
        # Инициализируем файл подкачки и включаем его
        mkswap ./swapfile
        swapon ./swapfile
        # Прописываем в fstab, автомонтирование файла подкачки при загрузке системы
        echo -e '# Swapfile\n/@swap/swapfile none swap sw 0 0' | tee -a /mnt/etc/fstab
    elif [ $filesystem = ext4 ]; then
        # Переходим в mnt установленной системы
        cd /mnt/mnt
        # Создаём файл нужного размера
        dd if=/dev/zero of=./swapfile bs=1M count=$swapfile status=progress
        # Разрешаем доступ к файлу подкачки только root-у
        chmod 600 ./swapfile
        # Инициализируем файл подкачки и включаем его
        mkswap ./swapfile
        swapon ./swapfile
        # Прописываем в fstab, автомонтирование файла подкачки при загрузке системы 
        echo -e '# Swapfile\n/mnt/swapfile none swap sw 0 0' | sudo tee -a /mnt/etc/fstab
    fi
fi

# Проверяем:
lsblk
swapon -s
cat /mnt/etc/fstab
